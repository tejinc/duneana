# addnoise_findprim_daqsimanas.fcl

# Read in (presumably noise-free) waveforms, add noise and pedestals,
# then find trigger primitives on the (now noisy) waveforms, and save
# the trigger primitives (as "Hits") to an output TTree.

# Any number of trigger primitive finders can be run: useful for
# running the same finder with multiple parameter settings, for
# example. The output of each trigger primitive finder should be
# connected to a DaqSimAna analyzer

#include "SNAna.fcl"
#include "absRunningSum.fcl"
BEGIN_PROLOG
runsum_snana: {
   @table::standard_snana
   SaveNeighbourADCs:    false
   SaveTruth:            true
}
END_PROLOG
#include "opticaldetectormodules_dune.fcl"
#include "standard_detsim_dune10kt_1x2x6.fcl"


process_name: PrimSim

services: @local::dunefd_simulation_services
services.TFileService: { fileName: "SNAna_plus_trigprim_multithreshold.root" }
services.Geometry:  @local::dune10kt_1x2x6_v4_geo
services.TimeTracker:       {}
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
// services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::per_event_NuRandomService  # seedservice.fcl
services.message:              @local::dune_message_services_prod
#source is now a root file
source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
   producers: {
      simwire: {
         module_type: "SimWireDUNE"
         SimChannelLabel: "largeant"
         NoiseOn: true
         PedestalOn: true
         DistortOn: false
         SuppressOn: false
         KeepEmptyChannels: true
         AdcSimulator:      "adcsim_ideal"
         UseRawDigitInput: true
         RawDigitInputLabel: "daq"
      }

      ophit:              @local::dune35t_ophit 

      # You can add any number of trigger primitive finders here. Make
      # sure each one has a distinct name, and has a corresponding
      # daqsimana analyzer otherwise you won't get a corresponding
      # TTree in the output file. Also make sure to add it to the "simulate" list below
      runsum350:  @local::absrunningsumtppass1
      runsum400:  @local::absrunningsumtppass1
      runsum450:  @local::absrunningsumtppass1
      runsum500:  @local::absrunningsumtppass1
      runsum550: @local::absrunningsumtppass1
      runsum600: @local::absrunningsumtppass1
      
      rns:            { module_type: "RandomNumberSaver" }
   }
   
   analyzers: {
      # Create an SNAna for each trigger primitive finders. Make
      # sure to add each one to the "ana" list below
     snanarunsum350:  @local::runsum_snana
     snanarunsum400:  @local::runsum_snana
     snanarunsum450:  @local::runsum_snana
     snanarunsum500:  @local::runsum_snana
     snanarunsum550: @local::runsum_snana
     snanarunsum600: @local::runsum_snana

   }

   simulate: [rns, simwire, ophit,
   	      runsum350,
	      runsum400,
	      runsum450,
	      runsum500,
	      runsum550,
	      runsum600]

   ana     : [snanarunsum350,
	      snanarunsum400,
	      snanarunsum450,
	      snanarunsum500,
	      snanarunsum550,
	      snanarunsum600]


   
   trigger_paths: [ simulate ] 
   end_paths: [ ana ] 

}

# Modify the settings of each of the trigger primitive finders. If you
# want to use a different trigger primitive finder class, set
# "physics.producers.<itemname>.finder.tool_type: MyNewTriggerPrimitiveFinderTool"
physics.producers.runsum350 .finder1.Threshold: 350
physics.producers.runsum400 .finder1.Threshold: 400
physics.producers.runsum450 .finder1.Threshold: 450
physics.producers.runsum500 .finder1.Threshold: 500
physics.producers.runsum550.finder1.Threshold: 550
physics.producers.runsum600.finder1.Threshold: 600

# Set the HitLabel to make sure each DaqAnaSim reads hits from its
#  corresponding TriggerPrimitiveFinder
physics.analyzers.snanarunsum350 .HitLabel:  "runsum350"
physics.analyzers.snanarunsum400 .HitLabel: "runsum400"
physics.analyzers.snanarunsum450 .HitLabel: "runsum450"
physics.analyzers.snanarunsum500 .HitLabel: "runsum500"
physics.analyzers.snanarunsum550.HitLabel: "runsum550"
physics.analyzers.snanarunsum600.HitLabel: "runsum600"
# Only save IDEs in one of the output trees, since they're always the same and will only take up space otherwise
# physics.analyzers.snanatrigprim800.SaveIDEs: true

# =====================================================================
# You probably won't need to change anything below here

# Shut up the backtracker
services.message.destinations.LogStandardOut.categories.BackTracker.limit: 0
services.message.destinations.LogStandardError.categories.BackTracker.limit: 0

# Display all the INFO message for SNAna_module
services.message.destinations.LogStandardOut.categories.SNAna_module.limit:-1

# If you want to have the mf::LogDebug() messages, uncomment the following:
# services.message.destinations.LogStandardOut.threshold:"DEBUG"
# services.message.destinations.LogStandardOut.categories.SNAna_module.limit:-1
# services.message.destinations.LogStandardOut.categories.default.limit:0


# DetSim services. These are used by SimWire to add noise and
# pedestals to the incoming (noise-free) waveforms
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zsnone
services.AdcCompressService:       @local::cmpreplace
services.DetPedestalService:       @local::dune_fixedpeds

#Optical detector configuration
physics.producers.ophit.InputModule: "opdigi"
